
#include <SpheroRVR.h>
#include <DriveControl.h>
#include <LEDControl.h>
#include "structs.h"

DriveControl dc;
LedControl lc;

#define REDLED_PIN 13
#define BLULED_PIN A0

bool stopFlag = false;

struct RGBColor {
  uint8_t r, g, b;
};


static uint32_t ledGroup;

RGBColor getColorFromId(uint8_t id) {
  switch (id) {
    case 1: return {255, 0, 0};     // Red
    case 2: return {0, 255, 0};     // Green
    case 3: return {0, 0, 255};     // Blue
    case 4: return {255, 255, 0};   // Yellow
    case 5: return {0, 255, 255};   // Cyan
    case 6: return {255, 0, 255};   // Magenta
    case 7: return {255, 255, 255}; // White
    case 8: return {255, 165, 0};   // Orange
    case 9: return {255, 192, 203}; // Pink
    default: return {0, 0, 0};      // Black or unknown
  }
}

void moveForward(unsigned long duration = 1000) {
  dc.rollStart(0, 64);  // heading 0 = inainte, speed = 64/255
  delay(duration);
  dc.rollStop(0);
}

// Merge Ã®napoi pentru X milisecunde
void moveBackward(unsigned long duration = 1000) {
  dc.rollStart(180, 64);  // heading 180 = spate
  delay(duration);
  dc.rollStop(180);
}

// Se roteÈ™te la stÃ¢nga (pivotare pe loc)
void rotateLeft(unsigned long duration = 800) {
  dc.setRawMotors(rawMotorModes::forward, 64, rawMotorModes::reverse, 64);
  delay(duration);
  dc.setRawMotors(rawMotorModes::off, 0, rawMotorModes::off, 0);
}

// Se roteÈ™te la dreapta
void rotateRight(unsigned long duration = 800) {
  dc.setRawMotors(rawMotorModes::reverse, 64, rawMotorModes::forward, 64);
  delay(duration);
  dc.setRawMotors(rawMotorModes::off, 0, rawMotorModes::off, 0);
}

// ðŸ”´ Rosu
const uint8_t redArray[] = {
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00
};

// ðŸŸ¢ Verde
const uint8_t grnArray[] = {
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
  0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00
};

// ðŸ”µ Albastru
const uint8_t bluArray[] = {
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF
};

// ðŸŸ¡ Galben
const uint8_t yelArray[] = {
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00
};

// ðŸ§  Cyan (albastru deschis) - RGB(0, 255, 255)
const uint8_t cyaArray[] = {
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF
};

// ðŸŸ£ Magenta (purpuriu) - RGB(255, 0, 255)
const uint8_t magArray[] = {
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF
};

// âšª Alb - RGB(255, 255, 255)
const uint8_t whtArray[] = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// ðŸŸ  Portocaliu - RGB(255, 165, 0)
const uint8_t orgArray[] = {
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00,
  0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00, 0xFF, 0xA5, 0x00
};

// ðŸŒ¸ Roz - RGB(255, 192, 203)
const uint8_t pnkArray[] = {
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB,
  0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB, 0xFF, 0xC0, 0xCB
};

void setup() {

  rvr.configUART(&Serial);
  delay(2000);

  pinMode(REDLED_PIN, OUTPUT);
  pinMode(BLULED_PIN, OUTPUT);

  dc = rvr.getDriveControl();
  lc = rvr.getLedControl();

  ledGroup = 0;

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightHeadlightRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightHeadlightGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightHeadlightBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftHeadlightRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftHeadlightGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftHeadlightBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftStatusIndicationRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftStatusIndicationGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftStatusIndicationBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightStatusIndicationRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightStatusIndicationGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightStatusIndicationBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::batteryDoorRearRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::batteryDoorRearGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::batteryDoorRearBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::batteryDoorFrontRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::batteryDoorFrontGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::batteryDoorFrontBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::powerButtonFrontRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::powerButtonFrontGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::powerButtonFrontBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::powerButtonRearRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::powerButtonRearGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::powerButtonRearBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftBrakelightRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftBrakelightGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::leftBrakelightBlue));

  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightBrakelightRed));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightBrakelightGreen));
  ledGroup |= (1 << static_cast<uint8_t>(LEDs::rightBrakelightBlue));

  rvr.setAllLeds(ledGroup, pnkArray, sizeof(pnkArray));
  
}

void loop() {


  digitalWrite(BLULED_PIN, HIGH);
  digitalWrite(REDLED_PIN, HIGH);
  delay(500);
  digitalWrite(BLULED_PIN, LOW);
  digitalWrite(REDLED_PIN, LOW);
  delay(500);

  rvr.poll();
  rvr.enableColorDetection(true);
  rvr.enableColorDetectionNotify(true, 1000, 20, colorCallback);
  rvr.getCurrentDetectedColorReading();
}
  
  

void colorCallback(ColorDetectionNotifyReturn_t *detection) {
  uint8_t id = detection->colorClassificationId;
  uint8_t conf = detection->confidence;

  if(detection->isSuccessful) {

    uint8_t r = detection->red;
    uint8_t g = detection->green;
    uint8_t b = detection->blue;

    // Toleranta pentru comparare
    const uint8_t threshold = 200;

    if (r > threshold) {
      // ROSU
       digitalWrite(REDLED_PIN, HIGH);
       delay(300);
       digitalWrite(REDLED_PIN, LOW);
       delay(300);
       rvr.setAllLeds(ledGroup, redArray, sizeof(redArray) / sizeof(redArray[0]));
       dc.aimStop();
       dc.rollStop(0);
    } 
    else if (g > threshold) {
      // VERDE
      digitalWrite(BLULED_PIN, HIGH);
      delay(500);
      digitalWrite(BLULED_PIN, LOW);
      delay(500);
      rvr.setAllLeds(ledGroup, grnArray, sizeof(grnArray) / sizeof(grnArray[0]));
      dc.aimStart();
      dc.rollStart(0, 32);
    } 
    else if (b > threshold) {
      // ALBASTRU
      rvr.setAllLeds(ledGroup, bluArray, sizeof(bluArray) / sizeof(bluArray[0]));
    } 
    // else if (r > threshold && g > threshold && b < 100) {
    //   // GALBEN
    //   rvr.setAllLeds(ledGroup, yelArray, sizeof(yelArray));
    // } 
    // else if (r < 100 && g > threshold && b > threshold) {
    //   // CYAN
    //   rvr.setAllLeds(ledGroup, cyaArray, sizeof(cyaArray));
    // } 
    // else if (r > threshold && g < 100 && b > threshold) {
    //   // MAGENTA
    //   rvr.setAllLeds(ledGroup, magArray, sizeof(magArray));
    // } 
    // else if (r > 220 && g > 220 && b > 220) {
    //   // ALB
    //   rvr.setAllLeds(ledGroup, whtArray, sizeof(whtArray));
    // } 
    // else if (r > threshold && g > 100 && g < 180 && b < 100) {
    //   // PORTOCALIU
    //   rvr.setAllLeds(ledGroup, orgArray, sizeof(orgArray));
    // } 
    // else if (r > threshold && g > 150 && b > 150) {
    //   // ROZ
    //   rvr.setAllLeds(ledGroup, pnkArray, sizeof(pnkArray));
    // } 
    // else {
    //   // ALTCEVA / NECUNOSCUT â€“ stinge LED-urile
    //   rvr.releaseLedRequests();
    // }
    delay(200);  // Pauza vizuala intre schimbari
  }
}
